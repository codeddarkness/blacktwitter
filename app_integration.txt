# Twitter Clone Feature Integration Guide

This guide provides instructions for integrating the various feature modules into your Twitter clone application.

## Installation Instructions

### 1. Download Module Files

Download the following module files and place them in your project directory:
- `user_profiles.py`
- `follow_system.py`
- `tweet_interactions.py`
- `search_functionality.py`
- `api_endpoints.py`
- `media_support.py`
- `notifications.py`
- `security_enhancements.py`

### 2. Install Required Dependencies

```bash
pip install flask-wtf flask-limiter flask-mail qrcode pyotp itsdangerous requests bs4
```

### 3. Create Required Directories

```bash
mkdir -p static/profile_pics static/uploads templates/partials
```

### 4. Create Template Files

Create the following template files (see the template section below for content):
- `templates/profile.html`
- `templates/edit_profile.html`
- `templates/feed.html`
- `templates/view_tweet.html`
- `templates/search.html`
- `templates/hashtag.html`
- `templates/trending.html`
- `templates/api_docs.html`
- `templates/notifications.html`
- `templates/notification_settings.html`
- `templates/reset_request.html`
- `templates/reset_token.html`
- `templates/setup_2fa.html`
- `templates/verify_2fa.html`
- `templates/security_settings.html`

### 5. Modify app.py

Update your main app.py file with the integration code below.

## Integration Code for app.py

Replace or update your app.py file with the following code:

```python
from flask import Flask, render_template, request, redirect, url_for, flash
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from flask_bcrypt import Bcrypt
import datetime
import os

# Initialize Flask app
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///twitter_clone.db'
app.config['SECRET_KEY'] = 'your_secret_key'  # Change this to a secure secret key
app.config['UPLOAD_FOLDER'] = os.path.join(app.root_path, 'static/uploads')

# Initialize database, bcrypt, and login manager
db = SQLAlchemy(app)
bcrypt = Bcrypt(app)
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = "login"

# User Model
class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password = db.Column(db.String(255), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=True)
    created_at = db.Column(db.DateTime, default=datetime.datetime.utcnow)

# Tweet Model
class Tweet(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    content = db.Column(db.String(280), nullable=False)
    timestamp = db.Column(db.DateTime, default=datetime.datetime.utcnow)
    user = db.relationship('User', backref=db.backref('tweets', lazy=True))

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

@app.route("/")
def home():
    tweets = Tweet.query.order_by(Tweet.timestamp.desc()).all()
    return render_template("index.html", tweets=tweets)

@app.route("/register", methods=["GET", "POST"])
def register():
    if request.method == "POST":
        username = request.form["username"]
        password = bcrypt.generate_password_hash(request.form["password"]).decode("utf-8")
        email = request.form.get("email")
        
        user = User(username=username, password=password, email=email)
        db.session.add(user)
        db.session.commit()
        flash("Account created successfully! Please log in.", "success")
        return redirect(url_for("login"))
    return render_template("register.html")

@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        username = request.form["username"]
        password = request.form["password"]
        user = User.query.filter_by(username=username).first()
        if user and bcrypt.check_password_hash(user.password, password):
            login_user(user)
            flash("Login successful!", "success")
            return redirect(url_for("home"))
        else:
            flash("Invalid username or password", "danger")
    return render_template("login.html")

@app.route("/logout")
@login_required
def logout():
    logout_user()
    flash("You have been logged out.", "info")
    return redirect(url_for("home"))

@app.route("/tweet", methods=["POST"])
@login_required
def post_tweet():
    content = request.form["content"]
    if len(content) > 280:
        flash("Tweet exceeds 280 characters!", "danger")
        return redirect(url_for("home"))

    tweet = Tweet(user_id=current_user.id, content=content)
    db.session.add(tweet)
    db.session.commit()
    flash("Tweet posted!", "success")
    return redirect(url_for("home"))

# Initialize all modules
def init_modules():
    # Import all feature modules
    from user_profiles import init_user_profiles
    from follow_system import init_follow_system
    from tweet_interactions import init_tweet_interactions
    from search_functionality import init_search_functionality
    from api_endpoints import init_api
    from media_support import init_media_support
    from notifications import init_notifications
    from security_enhancements import init_security
    
    # Initialize each module
    init_user_profiles(app, User)
    init_follow_system(app, User)
    init_tweet_interactions(app, db, User, Tweet)
    init_search_functionality(app, db, Tweet, User)
    init_api(app, db, User, Tweet)
    init_media_support(app, db, Tweet)
    init_notifications(app, db, User, Tweet)
    init_security(app, db, User, bcrypt)

if __name__ == "__main__":
    with app.app_context():
        db.create_all()  # Ensures database tables are created inside the application context
        init_modules()   # Initialize all feature modules
    app.run(debug=True)
```

## Update index.html Template

Update your index.html template to include file upload support and tweet interactions:

```html
<!DOCTYPE html>
<html>
<head>
    <title>Twitter Clone</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
</head>
<body class="container">
    <nav class="navbar navbar-expand-lg navbar-light bg-light mb-4">
        <div class="container-fluid">
            <a class="navbar-brand" href="{{ url_for('home') }}">Twitter Clone</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('home') }}">Home</a>
                    </li>
                    {% if current_user.is_authenticated %}
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('follow_system.feed') }}">My Feed</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('search_functionality.trending') }}">Trending</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('notifications.view_notifications') }}">
                            Notifications
                            <span class="badge bg-primary notification-badge">0</span>
                        </a>
                    </li>
                    {% endif %}
                </ul>
                <form class="d-flex me-2" action="{{ url_for('search_functionality.search') }}" method="GET">
                    <input class="form-control me-2" type="search" name="q" placeholder="Search" aria-label="Search">
                    <button class="btn btn-outline-success" type="submit">Search</button>
                </form>
                <div class="navbar-nav">
                    {% if current_user.is_authenticated %}
                        <a class="nav-link" href="{{ url_for('user_profiles.profile', username=current_user.username) }}">
                            {{ current_user.username }}
                        </a>
                        <a class="nav-link" href="{{ url_for('security.settings') }}">Settings</a>
                        <a class="nav-link" href="{{ url_for('logout') }}">Logout</a>
                    {% else %}
                        <a class="nav-link" href="{{ url_for('login') }}">Login</a>
                        <a class="nav-link" href="{{ url_for('register') }}">Register</a>
                    {% endif %}
                </div>
            </div>
        </div>
    </nav>

    {% with messages = get_flashed_messages(with_categories=true) %}
        {% if messages %}
            {% for category, message in messages %}
                <div class="alert alert-{{ category }}">{{ message }}</div>
            {% endfor %}
        {% endif %}
    {% endwith %}

    {% if current_user.is_authenticated %}
        <div class="card mb-4">
            <div class="card-body">
                <form action="{{ url_for('post_tweet') }}" method="POST" enctype="multipart/form-data">
                    <input type="hidden" name="csrf_token" value="{{ csrf_token() }}">
                    <textarea name="content" class="form-control" rows="3" placeholder="What's happening?" required></textarea>
                    <div class="mt-2 d-flex justify-content-between">
                        <div>
                            <input type="file" name="file" class="form-control form-control-sm" accept="image/*, video/mp4">
                            <small class="text-muted">Add photos or a video</small>
                        </div>
                        <button type="submit" class="btn btn-primary">Tweet</button>
                    </div>
                </form>
            </div>
        </div>
    {% else %}
        <p><a href="{{ url_for('login') }}">Login</a> or <a href="{{ url_for('register') }}">Register</a> to post tweets.</p>
    {% endif %}

    <hr>
    <h3>Latest Tweets</h3>
    {% for tweet in tweets %}
        <div class="card mt-3">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <h5 class="card-title">
                        <a href="{{ url_for('user_profiles.profile', username=tweet.user.username) }}">
                            {{ tweet.user.username }}
                        </a>
                    </h5>
                    <small class="text-muted">{{ tweet.timestamp.strftime('%Y-%m-%d %H:%M:%S') }}</small>
                </div>
                <p class="card-text">{{ tweet.content }}</p>
                
                {% if tweet.media %}
                    <div class="media-container mb-3">
                        {% for media in tweet.media %}
                            {% if media.media_type == 'image' %}
                                <img src="{{ url_for('static', filename='uploads/' + media.filename) }}" class="img-fluid rounded">
                            {% elif media.media_type == 'gif' %}
                                <img src="{{ url_for('static', filename='uploads/' + media.filename) }}" class="img-fluid rounded">
                            {% elif media.media_type == 'video' %}
                                <video controls class="img-fluid rounded">
                                    <source src="{{ url_for('static', filename='uploads/' + media.filename) }}" type="video/mp4">
                                    Your browser does not support the video tag.
                                </video>
                            {% endif %}
                        {% endfor %}
                    </div>
                {% endif %}
                
                {% if tweet.url_previews %}
                    {% for preview in tweet.url_previews %}
                        <div class="card mb-3">
                            <div class="card-body">
                                <h6 class="card-subtitle mb-2">
                                    <a href="{{ preview.url }}" target="_blank">{{ preview.title or preview.url }}</a>
                                </h6>
                                {% if preview.description %}
                                    <p class="card-text small">{{ preview.description }}</p>
                                {% endif %}
                                {% if preview.image_url %}
                                    <img src="{{ preview.image_url }}" class="img-fluid rounded" style="max-height: 150px;">
                                {% endif %}
                            </div>
                        </div>
                    {% endfor %}
                {% endif %}
                
                <div class="d-flex mt-2">
                    <button class="btn btn-sm btn-outline-primary me-2 like-btn" data-tweet-id="{{ tweet.id }}">
                        <i class="bi bi-heart{% if current_user.is_authenticated and tweet.is_liked_by(current_user) %}-fill{% endif %}"></i>
                        <span class="like-count">{{ tweet.get_like_count() }}</span>
                    </button>
                    <a href="{{ url_for('tweet_interactions.view_tweet', tweet_id=tweet.id) }}" class="btn btn-sm btn-outline-secondary me-2">
                        <i class="bi bi-chat"></i>
                        <span class="reply-count">{{ tweet.get_reply_count() }}</span>
                    </a>
                    <button class="btn btn-sm btn-outline-success me-2 retweet-btn" data-tweet-id="{{ tweet.id }}" data-bs-toggle="modal" data-bs-target="#retweetModal{{ tweet.id }}">
                        <i class="bi bi-arrow-repeat"></i>
                        <span class="retweet-count">{{ tweet.get_retweet_count() }}</span>
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Retweet Modal -->
        <div class="modal fade" id="retweetModal{{ tweet.id }}" tabindex="-1" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Retweet</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <form action="{{ url_for('tweet_interactions.retweet', tweet_id=tweet.id) }}" method="POST">
                        <input type="hidden" name="csrf_token" value="{{ csrf_token() }}">
                        <div class="modal-body">
                            <p>Original tweet by {{ tweet.user.username }}:</p>
                            <p class="card-text">{{ tweet.content }}</p>
                            <div class="mb-3">
                                <label for="quoteContent" class="form-label">Add a comment (optional)</label>
                                <textarea class="form-control" id="quoteContent" name="content" rows="3"></textarea>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="submit" class="btn btn-success">Retweet</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    {% endfor %}

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Like functionality
        document.querySelectorAll('.like-btn').forEach(button => {
            button.addEventListener('click', function() {
                const tweetId = this.getAttribute('data-tweet-id');
                fetch(`/tweet/${tweetId}/like`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': '{{ csrf_token() }}'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    const icon = this.querySelector('i');
                    const count = this.querySelector('.like-count');
                    
                    if (data.status === 'liked') {
                        icon.classList.remove('bi-heart');
                        icon.classList.add('bi-heart-fill');
                    } else {
                        icon.classList.remove('bi-heart-fill');
                        icon.classList.add('bi-heart');
                    }
                    
                    count.textContent = data.count;
                });
            });
        });
        
        // Notification count updates
        function updateNotificationCount() {
            fetch('/notifications/count')
                .then(response => response.json())
                .then(data => {
                    const badge = document.querySelector('.notification-badge');
                    if (badge) {
                        badge.textContent = data.count;
                        if (data.count > 0) {
                            badge.style.display = 'inline';
                        } else {
                            badge.style.display = 'none';
                        }
                    }
                });
        }
        
        // Update notification count every 30 seconds
        updateNotificationCount();
        setInterval(updateNotificationCount, 30000);
    </script>
</body>
</html>
```

## Update login.html and register.html

Update your login.html template to include email field for password reset:

```html
<!DOCTYPE html>
<html>
<head>
    <title>Login</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
</head>
<body class="container">
    <h1 class="mt-4">Login</h1>
    
    {% with messages = get_flashed_messages(with_categories=true) %}
        {% if messages %}
            {% for category, message in messages %}
                <div class="alert alert-{{ category }}">{{ message }}</div>
            {% endfor %}
        {% endif %}
    {% endwith %}
    
    <form method="POST">
        <input type="hidden" name="csrf_token" value="{{ csrf_token() }}">
        <input type="text" name="username" class="form-control" placeholder="Username" required>
        <input type="password" name="password" class="form-control mt-2" placeholder="Password" required>
        <button type="submit" class="btn btn-primary mt-2">Login</button>
    </form>
    <p class="mt-3"><a href="{{ url_for('register') }}">Don't have an account? Register</a></p>
    <p><a href="{{ url_for('security.reset_request') }}">Forgot password?</a></p>
</body>
</html>
```

Update your register.html template to include email field:

```html
<!DOCTYPE html>
<html>
<head>
    <title>Register</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
</head>
<body class="container">
    <h1 class="mt-4">Register</h1>
    
    {% with messages = get_flashed_messages(with_categories=true) %}
        {% if messages %}
            {% for category, message in messages %}
                <div class="alert alert-{{ category }}">{{ message }}</div>
            {% endfor %}
        {% endif %}
    {% endwith %}
    
    <form method="POST">
        <input type="hidden" name="csrf_token" value="{{ csrf_token() }}">
        <input type="text" name="username" class="form-control" placeholder="Username" required>
        <input type="email" name="email" class="form-control mt-2" placeholder="Email (for password recovery)" required>
        <input type="password" name="password" class="form-control mt-2" placeholder="Password" required>
        <small class="text-muted">Password must be at least 8 characters and include uppercase, lowercase, number, and special character</small>
        <button type="submit" class="btn btn-primary mt-3">Register</button>
    </form>
    <p class="mt-3"><a href="{{ url_for('login') }}">Already have an account? Login</a></p>
</body>
</html>
```

## Common Issues & Troubleshooting

1. **Database Migrations**: If you encounter database errors after adding new models, you might need to drop and recreate the database:
   ```python
   with app.app_context():
       db.drop_all()
       db.create_all()
   ```

2. **CircularImport Errors**: If you encounter circular import errors, make sure you're importing modules within functions rather than at the module level.

3. **Missing Templates**: Ensure all template files are created in the correct locations.

4. **Missing Dependencies**: Make sure all required packages are installed.

## Next Steps

After integrating these features, consider:

1. Improving the UI with more advanced CSS and JavaScript
2. Adding unit tests for your application
3. Setting up a production deployment with a WSGI server like Gunicorn
4. Implementing a CDN for storing media files
5. Adding analytics to track user engagement
